require('dotenv').config();
const { testConnection } = require('./config/supabase');
const productsService = require('./services/productsService');

const testColors = {
  GREEN: '\x1b[32m',
  RED: '\x1b[31m',
  YELLOW: '\x1b[33m',
  BLUE: '\x1b[34m',
  RESET: '\x1b[0m'
};

async function runTests() {
  console.log(`${testColors.BLUE}üöÄ Test de l'int√©gration PostgreSQL/Prisma${testColors.RESET}\n`);
  
  // Test 1: Connexion PostgreSQL/Prisma
  console.log(`${testColors.YELLOW}Test 1: Connexion PostgreSQL/Prisma${testColors.RESET}`);
  try {
    await testConnection();
    console.log(`${testColors.GREEN}‚úÖ Connexion PostgreSQL/Prisma r√©ussie${testColors.RESET}\n`);
  } catch (error) {
    console.log(`${testColors.RED}‚ùå Erreur de connexion: ${error.message}${testColors.RESET}\n`);
    return;
  }

  // Test 2: R√©cup√©ration des produits
  console.log(`${testColors.YELLOW}Test 2: R√©cup√©ration des produits${testColors.RESET}`);
  try {
    const result = await productsService.getAllProducts();
    if (result.success) {
      console.log(`${testColors.GREEN}‚úÖ ${result.count} produits r√©cup√©r√©s${testColors.RESET}`);
      console.log(`Premiers produits:`, result.data.slice(0, 2));
    } else {
      console.log(`${testColors.RED}‚ùå Erreur: ${result.error}${testColors.RESET}`);
    }
  } catch (error) {
    console.log(`${testColors.RED}‚ùå Erreur: ${error.message}${testColors.RESET}`);
  }
  console.log('');

  // Test 3: Cr√©ation d'un produit de test
  console.log(`${testColors.YELLOW}Test 3: Cr√©ation d'un produit de test${testColors.RESET}`);
  try {
    const testProduct = {
      name: 'Collier Test ' + Date.now(),
      description: 'Produit de test cr√©√© automatiquement',
      price: 29.99,
      category: 'colliers',
      stock: 5,
      images: ['https://example.com/test.jpg'],
      featured: false
    };

    const result = await productsService.createProduct(testProduct);
    if (result.success) {
      console.log(`${testColors.GREEN}‚úÖ Produit cr√©√© avec l'ID: ${result.data.id}${testColors.RESET}`);
      
      // Test 4: R√©cup√©ration du produit cr√©√©
      console.log(`${testColors.YELLOW}Test 4: R√©cup√©ration du produit cr√©√©${testColors.RESET}`);
      const getResult = await productsService.getProductById(result.data.id);
      if (getResult.success) {
        console.log(`${testColors.GREEN}‚úÖ Produit r√©cup√©r√©: ${getResult.data.name}${testColors.RESET}`);
      } else {
        console.log(`${testColors.RED}‚ùå Erreur de r√©cup√©ration: ${getResult.error}${testColors.RESET}`);
      }
    } else {
      console.log(`${testColors.RED}‚ùå Erreur de cr√©ation: ${result.error}${testColors.RESET}`);
    }
  } catch (error) {
    console.log(`${testColors.RED}‚ùå Erreur: ${error.message}${testColors.RESET}`);
  }

  console.log(`\n${testColors.BLUE}üèÅ Tests termin√©s${testColors.RESET}`);
}

// V√©rification des variables d'environnement
console.log(`${testColors.BLUE}üîß V√©rification de la configuration${testColors.RESET}`);
console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Configur√©' : '‚ùå Manquant'}`);
console.log('NOTE: Assurez-vous d\'ex√©cuter les migrations Prisma si n√©cessaire: npx prisma migrate dev');
console.log('');

runTests().catch(console.error);
