/**
 * Utilitaire pour v√©rifier que les donn√©es proviennent bien de Supabase
 */

import apiService from '../services/apiService';

export async function validateDataSource() {
  try {
    console.group('üîç V√©rification de la source de donn√©es');
    
    // V√©rifier l'API
    console.log('V√©rification de l\'API...');
    const apiStatus = await apiService.checkApiStatus();
    console.log('Statut API:', apiStatus);
    
    // V√©rifier les produits
    console.log('V√©rification des produits...');
    const products = await apiService.getProducts();
    console.log('Produits:', products);
    
    // Diagnostic
    const isSupabase = 
      apiStatus.database?.includes('Supabase') || 
      products.source === 'supabase';
    
    if (isSupabase) {
      console.log('‚úÖ SUCC√àS: L\'application utilise Supabase comme source de donn√©es');
    } else {
      console.warn('‚ö†Ô∏è ATTENTION: L\'application n\'utilise PAS Supabase');
      console.warn('Source actuelle:', apiStatus.database || products.source || 'Inconnue');
    }
    
    // V√©rifier localStorage
    const localProducts = localStorage.getItem('products');
    const adminProducts = localStorage.getItem('adminProducts');
    
    if (localProducts || adminProducts) {
      console.warn('‚ö†Ô∏è Des donn√©es produits sont encore stock√©es dans localStorage');
      if (localProducts) console.log('localStorage.products:', JSON.parse(localProducts).length, 'produits');
      if (adminProducts) console.log('localStorage.adminProducts:', JSON.parse(adminProducts).length, 'produits');
      
      console.log('üí° Conseil: Supprimez ces donn√©es pour forcer l\'utilisation de l\'API');
    } else {
      console.log('‚úÖ Aucune donn√©e produit dans localStorage - parfait !');
    }
    
    return {
      success: isSupabase,
      usingSupabase: isSupabase,
      database: apiStatus.database,
      productCount: products.count,
      hasLocalStorage: !!(localProducts || adminProducts)
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation des donn√©es:', error);
    return {
      success: false,
      error: error.message
    };
  } finally {
    console.groupEnd();
  }
}

// Fonction pour nettoyer localStorage
export function cleanupLocalStorage() {
  console.log('üßπ Nettoyage des donn√©es produits dans localStorage...');
  localStorage.removeItem('products');
  localStorage.removeItem('adminProducts');
  console.log('‚úÖ Nettoyage termin√©');
  
  // Retourner le nombre d'√©l√©ments restants
  return Object.keys(localStorage).length;
}