cp docker-compose.yml docker-compose.yml.bak 2>/dev/null || true

cat > docker-compose.yml << 'EOF'
version: "3.8"

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - internal

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACK_PORT}
      DATABASE_URL: ${DATABASE_URL}
      SUPABASE_URL: ""
      SUPABASE_SERVICE_ROLE_KEY: ""
      PRISMA_MIGRATE: ${PRISMA_MIGRATE}
      FRONTEND_URL: ${FRONTEND_URL}
    volumes:
      - ./backend:/usr/src/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACK_PORT}/ || exit 1"]
      interval: 10s
      retries: 5
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL}
    networks:
      - internal

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - internal

volumes:
  pgdata:
  caddy_data:
  caddy_config:

networks:
  internal:
    driver: bridge
EOF
